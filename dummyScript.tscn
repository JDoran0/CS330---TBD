[gd_scene load_steps=5 format=3 uid="uid://ce1x4vj2atn1y"]

[sub_resource type="GDScript" id="GDScript_g67m2"]
script/source = "extends CharacterBody2D


const SPEED = 300.0
const JUMP_VELOCITY = -400.0

var health = 1000

#for debugging damage
var prevHealth = health

func _physics_process(delta: float) -> void:
	
	#debugging message (shows up in the command line)
	if health != prevHealth:
		print(\"Dummy health: \", health)
		prevHealth = health
	
	
	# Add the gravity.
	#if not is_on_floor():
	#	velocity += get_gravity() * delta

	# Handle jump.
	#if Input.is_action_just_pressed(\"ui_accept\") and is_on_floor():
	#	velocity.y = JUMP_VELOCITY

	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	#var direction := Input.get_axis(\"ui_left\", \"ui_right\")
	#if direction:
	#	velocity.x = direction * SPEED
	#else:
	#	velocity.x = move_toward(velocity.x, 0, SPEED)

	move_and_slide()
"

[sub_resource type="CapsuleMesh" id="CapsuleMesh_uwx65"]

[sub_resource type="CanvasTexture" id="CanvasTexture_ye4sr"]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_a24k8"]
radius = 8.0
height = 32.0

[node name="CharacterBody2D" type="CharacterBody2D"]
script = SubResource("GDScript_g67m2")

[node name="MeshInstance2D (standing)" type="MeshInstance2D" parent="."]
modulate = Color(0.760784, 0, 0, 1)
position = Vector2(0, 0.244924)
scale = Vector2(16, 16.2449)
mesh = SubResource("CapsuleMesh_uwx65")
texture = SubResource("CanvasTexture_ye4sr")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("CapsuleShape2D_a24k8")
